<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>chaincloud</title>
    <description>chaincloud&#39;s blog,use Jekyll and github pages.</description>
    <link>https://uizhanglong.github.io//</link>
    <atom:link href="https://uizhanglong.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 24 Aug 2016 13:18:21 +0800</pubDate>
    <lastBuildDate>Wed, 24 Aug 2016 13:18:21 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>ChainCloud 简介</title>
        <description>&lt;p&gt;&lt;strong&gt;ChainCloud&lt;/strong&gt; 是一个区块链云平台，企业或个人可以依赖 ChainCloud 平台来迅速的搭建起自己的区块链资产业务系统，而无需考虑区块链技术的具体实现及如何保障区块链资产的安全，ChainCloud 能满足多种区块链企业的资产管理需求，如：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;交易所；&lt;/li&gt;
    &lt;li&gt;存币/理财平台；&lt;/li&gt;
    &lt;li&gt;电商网站/会员系统；&lt;/li&gt;
    &lt;li&gt;支付企业；&lt;/li&gt;
    &lt;li&gt;博彩站；&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;ChainCloud&lt;/strong&gt; 平台的官方网站是：&lt;a href=&quot;http://chaincloud.com&quot;&gt;chaincloud.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ChainCloud&lt;/strong&gt; 平台的 API 文档网站是：&lt;a href=&quot;http://docs.chaincloud.com&quot;&gt;docs.chaincloud.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;网站和文档都是开源托管在 github.com 上的，用户可随时查阅版本历史。&lt;/p&gt;

&lt;p&gt;首先，让我们先来看一下 &lt;strong&gt;ChainCloud&lt;/strong&gt; 平台的系统架构，ChainCloud 架构图如下：
&lt;img src=&quot;https://uizhanglong.github.io/static/img/blog/picture/2.jpg&quot; alt=&quot;ChainCloud框架图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;该图中，您可以看到如下内容：&lt;/p&gt;

&lt;p&gt;1、&lt;strong&gt;Your Website&lt;/strong&gt; 指的是企业或个人用户自己的网站；&lt;/p&gt;

&lt;p&gt;2、&lt;strong&gt;ChainCloud API&lt;/strong&gt; 指的是 ChainCloud 平台的 API 服务；&lt;/p&gt;

&lt;p&gt;3、&lt;strong&gt;HSM-Hot&lt;/strong&gt; 和 &lt;strong&gt;HSM-Cold&lt;/strong&gt; 是我们自行设计和研发的硬件安全模块（Hardware Security Module），其中 Hot 是联网的、在线的热设备，Cold 是永远不联网的、离线的冷设备，另外 HSM-Cold 有短信模块，可支持通过短信的数据校验请求；&lt;/p&gt;

&lt;p&gt;4、我们还为用户专门设计了一个 &lt;strong&gt;V-Device（V设备）&lt;/strong&gt;的模型，通过V设备，让使用 ChainCloud API 的企业用户也能获得“二次验证”的安全性，类似于手机短信二次验证码或谷歌二次验证；&lt;/p&gt;

&lt;p&gt;V设备是一台由企业自行购买的、并确保安全存放的安卓手机，V设备上会运行着一个我们提供给用户的 chaincloud-v 开源应用，通过该应用能进行一系列的数据校验操作，以确保安全，V设备有如下注意事项：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;安卓版本 &amp;gt;= 4.0&lt;/strong&gt;；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;请使用双卡双待的手机，当前版本请配置一个开通了短信功能的联通SIM卡（未来会增加另一个运营商作为备份链路）&lt;/strong&gt;；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;我们会通过开源项目的方式将 chaincloud-v 的源码提交给用户，用户可进行二次开发（增加自己的安全校验逻辑），并自行打包&lt;/strong&gt;；&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;介绍完架构后，我们现在再来描述一下具体的用例。&lt;/p&gt;

&lt;p&gt;关于 &lt;strong&gt;ChainCloud API&lt;/strong&gt; 的基本访问方式，可参考：
&lt;a href=&quot;http://docs.chaincloud.com/en/latest/api/general-usage.html&quot;&gt;http://docs.chaincloud.com/en/latest/api/general-usage.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;首先，让我们讨论一下冷收款模块，相关的 API 说明均可以在文档中找到。&lt;/p&gt;

&lt;p&gt;当我们给用户开通了 API 账户之后，用户就能获得两个访问 API 的 token，分别对应于冷收款和热发款。ChainCloud 平台所提供的服务是收支两条线的，并且使用了完全隔离的系统架构，业务上互不影响，安全性上也是隔离的。&lt;/p&gt;

&lt;p&gt;对于冷收款来说，私钥都是存储在冷设备（离线断网存储）上的，黑客是无法访问的。在刚才的架构图中，通过 ChainCloud API 只能获取到地址，也就是说，即便是黑客黑了我们的系统，也只能获取到地址，无法获取任何私钥。&lt;/p&gt;

&lt;p&gt;在 Basic API 文档中，有一个接口叫 &lt;strong&gt;AddressBatch&lt;/strong&gt;：
&lt;a href=&quot;http://docs.chaincloud.com/en/latest/api/basic-api.html#address-batch&quot;&gt;http://docs.chaincloud.com/en/latest/api/basic-api.html#address-batch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这其实能用来获取一次性获取一个批次的地址，一个批次是 1000 个地址，每个地址都有序号，批次 0 的地址从序号 0 到序号 999 。&lt;/p&gt;

&lt;p&gt;我们要求用户请求了一个批次的地址之后，在正式使用之前，从安全性考虑，应进行验证，只有通过了验证的地址，才应该被用于收款。&lt;/p&gt;

&lt;p&gt;验证地址需要用到V设备，V设备会一直跑着我们写好的 &lt;strong&gt;chaincloud-v&lt;/strong&gt; 应用，然后放在一个安全点的地方，比如说，您的家里，连着电源，保持 chaincloud-v 应用一直在前台运行的状态。V设备每天会自动通过短信的方式与我们的 HSM-Cold 冷设备交换安全校验码（建立密码学安全的数据校验通道），这些都是自动进行的，也无需用户进行额外的开发工作，只要做好配置就能正常运行。通过短信交换安全校验码其实就相当于一个不依赖于互联网的（依赖的是手机短信运营商）的安全模型。&lt;/p&gt;

&lt;p&gt;当用户的网站通过 ChainCloud API 获取到一个批次的冷收款地址之后（用户需要在网站上自行开发一个简单的接口，能够让V设备知道刚刚获取到了一个批次的地址，并且还未进行验证），当V设备查询到有未验证的地址批次时（V设备会一直轮循网站的接口，来查看是否有新的、待验证批次的地址），会自动的对这个批次进行验证，会通过短信向 HSM-Cold 设备请求该批次的密码学签名。获取到签名之后，V设备就能够验证网站所获取的地址是否正确了，如果正确，V设备就通知网站该批地址正常，可以开始使用，您就可以分配这些地址用于具体的用途了。&lt;/p&gt;

&lt;p&gt;上述过程虽然看起来比较复杂，其实逻辑本身是很简单的，而且都已经实现完成，用户只需做简单的封装即可。&lt;/p&gt;

&lt;p&gt;这样设计的好处是，即便是我们的 ChainCloud API 服务被黑了，黑客可能会尝试着返回给用户错误的地址（比如说是他自己的地址），由于您可以直接使用安全设备（V设备）来向我们的 HSM-Cold 冷设备通过短信的方式请求数据校验信息，这种情况下黑客的伪造数据请求马上就会被识破，同时V设备会发送报警短信给系统管理员。这样，只用用户能一直保证只使用通过了验证的地址，即使黑客黑了我们的服务器，您也不会有任何资产损失。&lt;/p&gt;

&lt;p&gt;这就是我们的设计逻辑，我们会假定任何一个联网的中心化服务器都有可能被黑，但会通过给用户提供另一套数据校验机制，最终会通过短信通道去直接向冷设备请求验证信息，以确保安全。&lt;/p&gt;

&lt;p&gt;在使用通过验证的地址时，可通过相关 API 来监控这些地址上的交易，以监控系统内的充值行为：
&lt;a href=&quot;http://docs.chaincloud.com/en/latest/api/cold-receiving-api.html#address-txs&quot;&gt;http://docs.chaincloud.com/en/latest/api/cold-receiving-api.html#address-txs&lt;/a&gt;
这个接口可以监控该地址上的所有交易，也可以监控交易的确认情况，一般来说，&amp;gt;=1个确认的交易，可以认为充值成功。&lt;/p&gt;

&lt;p&gt;对于存入冷收款地址的比特币，我们会定期汇总给用户，定期或定量，比如说，每天一次，或者每50个比特币一次，这些操作都是人工进行的离线签名操作，因此很安全。另外，我们还会定期的进行电话回访，以确认汇总账目的正确性。&lt;/p&gt;

&lt;p&gt;说完冷收款 API 之后，我们再来说说热发款 API。&lt;/p&gt;

&lt;p&gt;对应于冷收款的 token，用户还会有一个热发款的 token，使用该 token 访问我们的 API，可以方便的查询到热钱包中的余额及历史交易等信息：
&lt;a href=&quot;http://docs.chaincloud.com/en/latest/api/basic-api.html#user&quot;&gt;http://docs.chaincloud.com/en/latest/api/basic-api.html#user&lt;/a&gt;
这个接口就能查到总余额等信息，冷热其实都能查。&lt;/p&gt;

&lt;p&gt;只要是热钱包中有余额，用户就可以通过调用 Hot Sending API 来实时发币。当然，这需要在用户那边得有一个数据库表，专门用来存储发币请求的相关信息。热发币接口是支持多目的地址发币的，比如说，您计划发送 1BTC 给 A，1.1 BTC 给 B，1.3 BTC 给 C，都可以实现，但需要先在您的系统中准备好相关信息。V设备会一直轮循发币请求接口（该接口请按照我们给出的样例来开发），当检测到有新的发币请求时，会对该请求进行解密，如果解密成功，会向 ChainCloud API 发起发币请求（同时会带上数据校验通道的签名信息），如果解密失败，意味着用户网站可能被黑（黑客构造了假的交易请求），V设备会将报警短信发送给管理员。&lt;/p&gt;

&lt;p&gt;V设备签名后的交易会通过 ChainCloud API 到 HSM-Hot，再到 HSM-Cold 才能完成交易签名，最后会把交易信息返回给用户，发币请求完成。当 HSM-Cold 进行交易签名时，会验证该交易请求是否是由V设备签署的，如果不是（签名验证失败），意味着用户的网站被黑了，黑客正在尝试构造虚假交易，HSM-Cold 会关闭用户的账户，并发送报警短信给 ChainCloud 的系统管理员。&lt;/p&gt;

&lt;p&gt;通过上述设计，我们就能从逻辑上确保用户热钱包资产的安全。如果是用户的网站被黑了，其实风险并不大，因为黑客同时能入侵 V 设备的难度是非常高的，V设备作为一个独立的安全设备，使用着不同的网络环境（甚至可以是 3G/4G 网络），而且有着不同的安全架构，所以很难同时被黑。只有通过 V 设备签名的交易请求，HSM-Cold才会签名交易，否则都会报警。对于 ChainCloud API 服务器被黑了的情况，风险也不大，因为黑客也无法访问 V 设备，这就确保了安全。&lt;/p&gt;

&lt;p&gt;这就是一开始提到的“二次验证”机制，让企业在使用 ChainCloud API 的时候也相当于有了谷歌二次验证。&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Aug 2016 00:00:00 +0800</pubDate>
        <link>https://uizhanglong.github.io//tec2016/08/23/blog.html</link>
        <guid isPermaLink="true">https://uizhanglong.github.io//tec2016/08/23/blog.html</guid>
        
        <category>bitcoin</category>
        
        
        <category>tec.</category>
        
      </item>
    
      <item>
        <title>我们为什么会拒绝一单生意</title>
        <description>&lt;p&gt;大约是在一年多以前，某业内巨头想请我们团队帮忙管理一把用于多重签名的冷私钥，巨头的生意肯定要认真考虑，因此，我们团队内部对这单生意进行了如下评估：&lt;/p&gt;

&lt;p&gt;1.&lt;strong&gt;稳定的营收&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;巨头会为这个私钥保管工作长期付费，费用可能并不高，但好在长期；&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;工作内容简单&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;除了冷存储的保管好一个私钥、每个月可能会有那么一两次离线签名的需求外，就没什么其他的工作要做的了，从工作量的角度上讲其成本近乎为零，而且我们在冷存储、离线签名领域本身就是行业内最优秀的团队，这项工作的安全风险也近乎为零；&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://uizhanglong.github.io/static/img/blog/picture/1.jpg&quot; alt=&quot;拒绝&quot; /&gt;&lt;/p&gt;

&lt;p&gt;好了，既然评估的结果是“&lt;strong&gt;&lt;em&gt;营收稳定、工作简单、低成本、低风险&lt;/em&gt;&lt;/strong&gt;”，那还有什么好想的？&lt;/p&gt;

&lt;p&gt;实际情况是，这看起来明明还不错的生意，我们仍然考虑了数日，并与该巨头反复进行了沟通，最终还是拒绝了这笔生意，原因很简单，那就是“&lt;strong&gt;责权利不分明&lt;/strong&gt;”。&lt;/p&gt;

&lt;p&gt;所谓的“&lt;strong&gt;责权利不分明&lt;/strong&gt;”指的是：虽然我们只负责保管一把钥匙，但这把钥匙上所对应的那些多重签名地址上的资产可能是几十、几百、几千甚至几万个比特币，也就是说，所需要保障安全的资产数量是不确定的，而不同资产数量的安全策略显然应该是不同的，成本也不应一样，几十、几百个币的私钥可能可以考虑锁在家里的保险柜中，那几千、几万呢？是不是应该存放在有专门安防系统的安全屋中，甚至应该考虑达到银行金库的安全级别呢？钥匙虽是同一把，责任却是不同，这生意也不是看起来的那么简单。&lt;/p&gt;

&lt;p&gt;最终，我们还是很认真的拒绝了这笔生意，虽然该巨头又反复的与我们商议，提出了包括提高费用等条件希望我们同意，但我们仍然还是拒绝了，因为这笔生意从&lt;strong&gt;逻辑上是不合理的，逻辑上不合理的生意，不做也罢&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;现在，我再对比一下我们所拒绝的这笔生意与 BitGo 为 Bitfinex 所提供的钱包服务的差异：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;我们只需要保管一把冷私钥，BitGo 提供的是很多热私钥的 API 服务；&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;巨头只要求我们每个月做那么一两次的离线签名，BitGo 提供的是实时签名交易的服务；&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;我们需要参与保障安全的资产数量是不确定的，BitGo 替 Bitfinex 保障着二十几万个比特币的资产安全；&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;我们拒绝了这笔生意，Bitfinex 则是丢了十二万个比特币；&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;从这个例子中大家可以看出，对于逻辑上不合理的生意，即便是更轻松（只需要保管一把冷冷私钥）、更安全（只做离线签名），我们的选择仍然是拒绝，而 BitGo 的选择则是接受，即便他们的方案在逻辑上是更不合理的（相当于把 Bitfinex 原本 99.5% 冷钱包的模型升级成了 100％的热钱包的模型），也没妨碍他们去赚这逻辑上不合理的钱，最终导致了重大的资产损失（十二万个比特币）。&lt;/p&gt;

&lt;p&gt;还是那句话：&lt;strong&gt;逻辑上不合理的生意，不做也罢，做了没准害人害己&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;我们只做逻辑上合理的生意，谢谢！&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Aug 2016 00:00:00 +0800</pubDate>
        <link>https://uizhanglong.github.io//business/2016/08/10/blog.html</link>
        <guid isPermaLink="true">https://uizhanglong.github.io//business/2016/08/10/blog.html</guid>
        
        <category>bitcoin</category>
        
        
        <category>business</category>
        
      </item>
    
  </channel>
</rss>
